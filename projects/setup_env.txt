var screenWidth = 0
var screenHeight = 0
var bgColor = 255
var gridUnit = 10

var serial
var menu, input
var IRtype = -1
var IRcommand = 0
var commands = ['FF38C7', 'FFC23D']
var IRid = -1

var s = function( p ) {
  p.setup = function() {
  	screenWidth = Math.round(p.windowWidth*0.4)
  	screenHeight = Math.round(p.windowHeight)
    p.createCanvas(screenWidth, screenHeight).parent('screen')
    p.noLoop()

    serial = new p5.SerialPort()
    serial.list()
    serial.on('list', printList)
    serial.on('data', processIRswitch)
  }

  p.draw = function() {
  }

  openPort = function() {
    portName = menu.elt.value
    serial.open(portName)
  }

  printList = function(serialList) {
    menu = p.createSelect()
    input = p.createInput()

    input.size(20)
    input.position(p.windowWidth*0.4-50, 0)
    input.style("z-index:3")

    var title = p.createElement('option', 'Choose a port:')
    menu.child(title)
    menu.position(p.windowWidth*0.4, 0)
    menu.style("z-index:3")

    menu.changed(openPort)
    for (var i = 0; i < serialList.length; i++) {
      var thisOption = p.createElement('option', serialList[i])
      thisOption.value = serialList[i]
      menu.child(thisOption)
    }
  }

  processIRswitch = function() {
    var string = serial.readStringUntil('\r\n')
    p.trim(string)
    if (!string) return

    var splitted = string.split('-')
    IRtype = splitted[0]

    if (IRtype == 1 && splitted[1] != 'FFFFFFFF') {
      IRcommand = splitted[1]
      IRid = commands.indexOf(IRcommand)
      console.log(IRcommand)
      console.log(IRid)
      input.value(IRid)
      drawRight()
    }
  }
}



myp5 = new p5(s)


Scheduler = function() {
  this.tasks   = []
  this.timeout = 1
  this.tick()
}

Scheduler.prototype.schedule = function(t) { this.tasks.push(t) }

Scheduler.prototype.tick = function() {
  var s = this
  if (this.tasks.length > 0)
    this.tasks.shift()()
  setTimeout(function() { s.tick() }, this.timeout)

}


theScheduler = new Scheduler()
theScheduler.schedule(function() {
	myp5.background(bgColor)
	myp5.redraw()
})


print = function(text) {
	theScheduler.schedule(function() {
		myp5.background(bgColor)
		myp5.textAlign(myp5.TOP, myp5.LEFT)
		myp5.textSize(20)
		myp5.text(text, 10, 10, screenWidth-10, screenHeight-10)
	})
}



clean = function() {
	myp5.background(bgColor)
	myp5.strokeWeight(1)
	myp5.stroke(0, 100, 200, 30)
	for (i=0; i<myp5.displayWidth; i=i+gridUnit) {
		myp5.line(i, 0, i, myp5.displayHeight)
	}
	for (i=0; i<myp5.displayHeight; i=i+gridUnit) {
		myp5.line(0, i, myp5.displayWidth, i)
	}
}
