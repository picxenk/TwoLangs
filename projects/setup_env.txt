var screenWidth = 0
var screenHeight = 0
var bgColor = 255
var gridUnit = 10

var serial
var menu
var Bits = [0, 0, 0, 0, 0, 0, 0, 0]
var IRtype = -1
var IRcommand = 0
var commands = ['000000',
  'FFA25D', 'FF629D', 'FFE21D',
  'FF22DD', 'FF02FD', 'FFC23D',
  'FFE01F', 'FFA857', 'FF906F',
  'FF6897', 'FF9867', 'FFB04F',
  'FF30CF', 'FF18E7', 'FF7A85',
  'FF10EF', 'FF38C7', 'FF5AA5',
  'FF42BD', 'FF4AB5', 'FF52AD']
var IRid = -1

var osc, osc2, env, env2

var s = function( p ) {
  p.setup = function() {
  	screenWidth = Math.round(p.windowWidth*0.4)
  	screenHeight = Math.round(p.windowHeight)
    p.createCanvas(screenWidth, screenHeight).parent('screen')
    p.noLoop()

    serial = new p5.SerialPort()
    serial.list()
    serial.on('list', printList)
    serial.on('data', process8Bits)

    osc = new p5.SinOsc()
    osc2 = new p5.SqrOsc()
    env = new p5.Env()
    env.setADSR(0.001, 0.5, 0.1, 0.5)
    env.setRange(1, 0)
    env2 = new p5.Env()
    env2.setADSR(0.001, 0.2, 0.1, 0.5)
    env2.setRange(1, 0)

    osc.start()
    osc.freq(0)
    osc2.start()
    osc2.freq(0)
  }

  p.draw = function() {
  }

  openPort = function() {
    portName = menu.elt.value
    serial.open(portName)
  }

  printList = function(serialList) {
    menu = p.createSelect()

    var title = p.createElement('option', 'Choose a port:')
    menu.child(title)
    menu.position(p.windowWidth*0.4, 0)
    menu.style("z-index:3")

    menu.changed(openPort)
    for (var i = 0; i < serialList.length; i++) {
      var thisOption = p.createElement('option', serialList[i])
      thisOption.value = serialList[i]
      menu.child(thisOption)
    }
  }

  toBits = function(b) {
    bits = [];
    for (let i=0; i<8; i++) {
      bits[7-i] = (b >> i) & 1;
    }
    return bits;
  }

  process8Bits = function() {
    var bits = toBits(serial.read());
    Bits = bits;
    show8Bits();
    //serial.clear();
    //console.log(bits);
    //if (bits > 0) drawLeft()
  }

  show8Bits = function() {
    p.strokeWeight(2);
    p.stroke(120);
    for (var i=0; i<8; i++) {

      if (Bits[i] == 1) p.fill(0);
      else p.fill(255);
      p.rect(0+gridUnit*i, 0, gridUnit, gridUnit);
    }
  }

}



myp5 = new p5(s)


Scheduler = function() {
  this.tasks   = []
  this.timeout = 1
  this.tick()
}

Scheduler.prototype.schedule = function(t) { this.tasks.push(t) }

Scheduler.prototype.tick = function() {
  var s = this
  if (this.tasks.length > 0)
    this.tasks.shift()()
  setTimeout(function() { s.tick() }, this.timeout)

}


theScheduler = new Scheduler()
theScheduler.schedule(function() {
	myp5.background(bgColor)
	myp5.redraw()
})


print = function(text) {
	theScheduler.schedule(function() {
		myp5.background(bgColor)
		myp5.textAlign(myp5.TOP, myp5.LEFT)
		myp5.textSize(20)
		myp5.text(text, 10, 10, screenWidth-10, screenHeight-10)
	})
}



clean = function() {
	myp5.background(bgColor)
	myp5.strokeWeight(1)
	myp5.stroke(0, 100, 200, 30)
	for (i=0; i<myp5.displayWidth; i=i+gridUnit) {
    if (i%100 == 0) myp5.strokeWeight(2)
    else myp5.strokeWeight(1)
		myp5.line(i, 0, i, myp5.displayHeight)
	}
	for (i=0; i<myp5.displayHeight; i=i+gridUnit) {
    if (i%100 == 0) myp5.strokeWeight(2)
    else myp5.strokeWeight(1)
		myp5.line(0, i, myp5.displayWidth, i)
	}
}

playNote = function(note) {
  var freq = myp5.midiToFreq(note)
  osc.freq(freq)
  env.play(osc, 0, 0.1)

}


playNote2 = function(note) {
  var freq = myp5.midiToFreq(note)
  osc2.freq(freq)
  env2.play(osc2, 0, 0.1)
}

playTone = playNote
tone = playNote
playTone2 = playNote2

ding = function(n) {
  var note = [70, 94, 106]
  var i = (n-1)%note.length
  playNote(note[i])
}

dongLOGO = function(n) {
  var note = [41, 53, 65]
  var i = (n-1)%note.length;
  playNote2(note[i])
}
